nodes {
    stats {
        type: kether
        value: """
        if context has &invokeArgs[0] then context get &invokeArgs[0] else '...'
        """
    }
    rest {
        type: kether
        value: """
            for tag in array [
                *servers
                *players
                *versions
                *regions
            ] then {
                context del &tag
                task &tag
            }
        """
    }
}

tasks {
    
    servers {
        period: 2000
        run {
            type: javascript
            throwable: false
            value: """
            function servers() {
                var url = "https://bstats.org/api/v1/plugins/" + shell("context get selected_pluginId") + "/charts/servers/data?maxElements=1";
                var raw = Utils.fromURL(url);
                var count =  Utils.asJsonArray(Utils.asJsonArray(raw)[0])[1];
                shell("context set *servers to " + count);
            }
            servers()
            """
        }
    }
    
    players {
        period: 2000
        run {
            type: javascript
            throwable: false
            value: """
            function players() {
                var url = "https://bstats.org/api/v1/plugins/" + shell("context get selected_pluginId") + "/charts/players/data?maxElements=1";
                var raw = Utils.fromURL(url);
                var count =  Utils.asJsonArray(Utils.asJsonArray(raw)[0])[1];
                shell("context set *players to " + count);
            }
            players()
            """
        }
    }
    
    versions {
        period: 2000
        run {
            type: javascript
            throwable: false
            value: """
            function versions() {
                var url = "https://bstats.org/api/v1/plugins/" + shell("context get selected_pluginId") + "/charts/pluginVersion/data?maxElements=1";
                var array = Utils.asJsonArray(Utils.fromURL(url));
                var versions = "";
                var list = 5
                var end = Math.min(array.length, list);
                var total = 0;
                var rank = 1;
                for (var i = 0; i < array.length; i++){
                    var y = Utils.asJsonObject(array[i]).get("y");
                    total += Number(y);
                }
                for (var i = array.length - 1; i >= array.length - end; i--) {
                    var obj =  Utils.asJsonObject(array[i]);
                    var version = obj.get("name").toString().replace(/"/g, "");
                    var percentage = (obj.get("y") / total * 100.0).toFixed(1);
                    if (rank <= 3)
                      versions += "&8- &f" + rank++ + ". &a" + version + " &8(&6" + percentage + "% &8) \\n";
                    else
                      versions += "&8- " + rank++ + ". " + version + " (" + percentage + "% ) \\n";
                }
                shell("context set *versions to *\'" + versions + "\'");
            }
            versions()
            """
        }
    }
    
    regions {
        period: 2000
        run {
            type: javascript
            throwable: false
            value: """
            function regions() {
                var url = "https://bstats.org/api/v1/plugins/" + shell("context get selected_pluginId") + "/charts/locationMap/data?maxElements=1";
                var array = Utils.asJsonArray(Utils.fromURL(url));
                var regions = "";
                var list = 5
                var end = Math.min(array.length, list);
                var total = 0;
                var rank = 1;
                for (var i = 0; i < array.length; i++){
                    var y = Utils.asJsonObject(array[i]).get("value");
                    total += Number(y);
                }
                for (var i = array.length - 1; i >= array.length - end; i--) {
                    var obj =  Utils.asJsonObject(array[i]);
                    var code = obj.get("code").toString().replace(/"/g, "");
                    var percentage = (obj.get("value") / total * 100.0).toFixed(1);
                    if (rank <= 3)
                      regions += "&8- &f" + rank++ + ". &a" + code + " &8(&6" + percentage + "% &8) \\n";
                    else
                      regions += "&8- " + rank++ + ". " + code + " (" + percentage + "% ) \\n";
                }
                shell("context set *regions to *\'" + regions + "\'");
            }
            regions()
            """
        }
    }
    
}